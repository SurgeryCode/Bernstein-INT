<link rel="stylesheet" href="{{ 'component-wishlist.css' | asset_url }}" media="print" onload="this.media='all'">
<noscript>{{ 'component-wishlist.css' | asset_url | stylesheet_tag }}</noscript>

<script id="product-badges-data" type="application/json">
  {
    {% assign first = true %}
    {% for item in shop.metaobjects['product_badge'].values %}
      {% unless first %},{% endunless %}
      "{{ item.name.value | escape }}": {
        "condition": "{{ item.condition.value }}",
        "related_product_tag": "{{ item.related_product_tag.value | escape }}"
      }
      {% assign first = false %}
    {% endfor %}
  }
</script>

<script>
  const productBadgesData = JSON.parse(document.getElementById("product-badges-data").textContent);

  window.VariantData = [
    {% for variant in product.variants %}
      {
        id: {{ variant.id }},
        url: '{{ variant.url }}',
        title: "{{ product.title }} {% if variant.title != "Default Title" %}{{ variant.title }}{% endif %}",
        subtitle: "{{ variant.metafields.custom.subtitle }}",
        lowestPrice: "{{ variant.metafields.custom.omnibus }}",
        price: "{{ variant.price | money_without_currency }}",
        oldPrice: "{{ variant.compare_at_price | money_without_currency}}",
        image: {
          src: "{{ variant.featured_image | img_url: 'master' }}",
          alt: "{{ variant.featured_image.alt | escape }}"
        },
        productTags: '{{ product.tags }}',
        productAvailable: {{ product.available }}
      }{% unless forloop.last %},{% endunless %}
    {% endfor %}
  ];

 function toggleWishlist(button) {
  if (!button || !button.getAttribute) return;
  const productVariantId = button.getAttribute('data-variant-id');
  const productTitle = button.getAttribute('data-title');
  const productSubtitle = button.getAttribute('data-subtitle');
  const productPrice = button.getAttribute('data-price');
  const productOldPrice = button.getAttribute('data-old-price');
  const productUrl = button.getAttribute('data-url');
  const productImg = button.getAttribute('data-img');
  const lowestPrice = button.getAttribute('data-lowest-price');
  const productTags = button.getAttribute('data-tag');
  const productAvailable = button.getAttribute('data-available');

  const pdpData = {
    productTitle,
    productSubtitle,
    productOldPrice,
    productImg,
    productPrice,
    productUrl,
    productVariantId,
    lowestPrice,
    productTags,
    productAvailable
  };

  let wishlistData = JSON.parse(localStorage.getItem('wishlist')) || [];
  const isAlreadyInWishlist = wishlistData.some(item => item.productVariantId == productVariantId);

  if (!isAlreadyInWishlist) {
    wishlistData.push(pdpData);
    localStorage.setItem('wishlist', JSON.stringify(wishlistData));
    button.innerHTML = `{% render 'svg-icon', name: "heart-filled" %}`;
  } else {
    wishlistData = wishlistData.filter(item => item.productVariantId != productVariantId);
    localStorage.setItem('wishlist', JSON.stringify(wishlistData));
    button.innerHTML = `{% render 'svg-icon', name: "heart" %}`;
  }

  displayWishlist();
  updateWishlistCount();
}

function displayWishlist() {
  const wishlistData = JSON.parse(localStorage.getItem('wishlist')) || [];

  if (wishlistData.length === 0) {
    const wishlistWrapper = document.querySelector(".wishlist-wrapper");
    wishlistWrapper && wishlistWrapper.classList.add("empty-wishlist");
    console.log('Wishlist is empty');
    return;
  }

  function parsePrice(priceString) {
    if (!priceString) return 0;
    return parseFloat(
      priceString.replace(/\./g, '').replace(',', '.')
    );
  }

  function handleize(str) {
    return str
      .toLowerCase()
      .replace(/[^a-z0-9]+/g, '-')
      .replace(/^-|-$/g, '');
  }

  function generateProductBadge(item) {
    const oldPrice = parsePrice(item.productOldPrice);
    const price = parsePrice(item.productPrice);
    const isOnSale = oldPrice > price;
    const discountPercent = isOnSale ? Math.round(((oldPrice - price) / oldPrice) * 100) : 0;
  
    const tags = item.productTags || [];
  
    let badgesHtml = '';
  
    for (const [badgeName, badge] of Object.entries(productBadgesData)) {
      if (badge.condition === 'Product is on sale' && isOnSale) {
        badgesHtml += `<li class="product-badges__item product-badges__item--sale product-badges__item--${handleize(badgeName)}">-${discountPercent}%</li>`;
      }
  
      if (badge.condition === 'Product is sold out') {
        if (!item.productAvailable) {
          badgesHtml += `<li class="product-badges__item product-badges__item--${handleize(badgeName)}">${badgeName}</li>`;
        }
      }
  
      if (badge.condition === 'Product is tagged' && badge.related_product_tag) {
        if (tags.includes(badge.related_product_tag)) {
          badgesHtml += `<li class="product-badges__item product-badges__item--${handleize(badgeName)}">${badgeName}</li>`;
        }
      }
    }
  
    if (badgesHtml !== '') {
      return `<ul class="product-badges f-11 w-medium upper">${badgesHtml}</ul>`;
    } else {
      return '';
    }
  }
  

  const wishlistHtml = wishlistData.slice().reverse().map(item => `
    <div class="wishlist-product__list">
      <div class="c-product product-item" data-product-id="${item.productVariantId}" data-product-title="${item.productTitle}">
        ${generateProductBadge(item)}
        <a href="${item.productUrl}">
          <img src="${item.productImg}" alt="${item.productTitle}">
        </a>
        <h3 class="c-product__title card__heading h5">
          <a class="full-unstyled-link" href="${item.productUrl}">${item.productTitle}</a>
        </h3>
        <p class="f-14 gray">${item.productSubtitle}</p>
        <div class="price__main">
          ${
            parsePrice(item.productOldPrice) > parsePrice(item.productPrice)
              ? `
                <span class="f-24 w-bold red">
                  ${item.productPrice} €
                </span>
                <span style="display: inline-flex; align-items: baseline; gap: 4px;">
                  <del class="f-12 w-medium gray">
                    ${item.productOldPrice} €
                  </del>
                </span>
              `
              : `
                <span class="f-24 w-bold">
                  ${item.productPrice} €
                </span>
              `
          }
          ${
            parsePrice(item.productOldPrice) > parsePrice(item.productPrice) && item.lowestPrice 
            ? `
            <p class="price__lowest f-11 w-medium gray"> Niedrigster Preis in den letzten 30 Tagen: ${new Intl.NumberFormat('de-DE', { style: 'decimal', minimumFractionDigits: 2, maximumFractionDigits: 2 }).format(item.lowestPrice)} €<p>
            `
            : 
            `

            `
          }
        </div>
        <button class="product-item__atc"
                data-variant-id="${item.productVariantId}"
                data-action="add-to-cart"
                title="{{ 'product.add_to_cart' | t }}"
                aria-label="{{ 'product.add_to_cart' | t }}">
                {%- render 'svg-icon', name: 'cart-add' -%}
                {%- render 'svg-icon', name: 'check' -%}
        </button>
  
        <button class="wishlist-remove"
          data-variant-id="${item.productVariantId}"
          title="{{ 'wishlist.remove' | t }}"
          aria-label="{{ 'wishlist.remove' | t }}">
          {%- render 'svg-icon', name: 'close' -%}
        </button>
      </div>
    </div>
  `).join('');
  

  const wishlistBlock = document.querySelector('.js-wishlistBlock');
  const path = {{ request.path | json }};

  if (wishlistBlock && path == "/pages/wunschliste") {
    wishlistBlock.innerHTML = wishlistHtml;

    document.querySelectorAll('.product-item__atc').forEach(button => {
      button.addEventListener('click', (e) => {
        e.preventDefault();
    
        const action = button.getAttribute('data-action');
        const variantId = button.getAttribute('data-variant-id');
    
        if (action === 'add-to-cart') {
          button.classList.add('product-item__atc--loading');
    
          const data = {
            items: [{
              id: variantId,
              quantity: 1
            }]
          };
    
          fetch('/cart/add.js', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
          })
          .then(res => res.json())
          .then(data => {
            button.setAttribute('data-action', 'remove-from-cart');
            button.classList.remove('product-item__atc--loading');
            button.setAttribute('title', window.accessibility.remove_from_cart || 'Remove from cart');
            button.setAttribute('aria-label', window.accessibility.remove_from_cart || 'Remove from cart');
            window.dispatchEvent(new CustomEvent('cartCounterUpdate'));
            window.dispatchEvent(new CustomEvent('cartViewUpdate', { detail: data.items }));
            window.dispatchEvent(new CustomEvent('drawerOpen', {
              detail: {
                  id: 'drawer-product-upsell' 
              }
            }));
          });
    
        } else if (action === 'remove-from-cart') {
          button.classList.add('product-item__atc--loading');
    
          const updateData = { updates: {} };
          updateData.updates[variantId] = 0;
    
          fetch('/cart/update.js', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(updateData)
          })
          .then(response => response.json())
          .then(cart => {
            button.setAttribute('data-action', 'add-to-cart');
            button.classList.remove('product-item__atc--loading');
            button.setAttribute('title', window.accessibility.add_to_cart || 'Add to cart');
            button.setAttribute('aria-label', window.accessibility.add_to_cart || 'Add to cart');
            window.dispatchEvent(new CustomEvent('cartCounterUpdate'));
          });
        }
      });
    });

    document.querySelectorAll('.wishlist-remove').forEach(removeButton => {
      removeButton.addEventListener('click', (e) => {
        const variantId = removeButton.getAttribute('data-variant-id');
        let wishlistData = JSON.parse(localStorage.getItem('wishlist')) || [];
        wishlistData = wishlistData.filter(item => item.productVariantId != variantId);
        localStorage.setItem('wishlist', JSON.stringify(wishlistData));
        displayWishlist();
        updateWishlistCount();
      });
    });
    
  }
}

function updateWishlistCount() {
  const count = JSON.parse(localStorage.getItem('wishlist'))?.length || 0;
  const counter = document.querySelector('[data-wishlist-count ]');

  if (counter) {
    counter.textContent = count;
    counter.style.display = count > 0 ? 'inline-block' : 'none';
    counter.style.lineHeight = "initial";
  }
}

function base64ToUtf8(str) {
  return decodeURIComponent(escape(atob(str)));
}

document.addEventListener('DOMContentLoaded', function () {
  const params = new URLSearchParams(window.location.search);
  const encodedWishlist = params.get('wishlist');

  if (encodedWishlist) {
    try {
      const decoded = base64ToUtf8(decodeURIComponent(encodedWishlist));
      sessionStorage.setItem('wishlist', decoded);
      displayWishlist();
      updateWishlistCount();
    } catch (e) {
      console.error("Could not load wishlist from link", e);
    }
  }

  function getWishlistData() {
    return JSON.parse(localStorage.getItem('wishlist')) || [];
  }

  function initializeWishlistButtons() {
    const wishlistData = getWishlistData();
    document.querySelectorAll('.wishlist_button').forEach(button => {
      if (button.dataset.initialized) return; 
      button.dataset.initialized = true;
  
      const productVariantId = button.getAttribute('data-variant-id');
      const isAlreadyInWishlist = wishlistData.some(item => item.productVariantId == productVariantId);
      
      button.innerHTML = isAlreadyInWishlist
        ? `{% render 'svg-icon', name: "heart-filled" %}`
        : `{% render 'svg-icon', name: "heart" %}`;
  
      button.addEventListener('click', () => toggleWishlist(button));
    });
  }
  
  initializeWishlistButtons();
  
  const observer = new MutationObserver((mutations) => {
    mutations.forEach(() => initializeWishlistButtons());
  });
  
  observer.observe(document.body, {
    childList: true,
    subtree: true,
  });

  displayWishlist();
  updateWishlistCount();

  const searchInput = document.querySelector('.header__search input[type=search]');

  if (searchInput) {
    searchInput.addEventListener('input', function () {
        initializeWishlistButtons();
        updateWishlistCount();
    });
  }
});
</script>
 